# -*- coding: utf-8 -*-
"""stat_ass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kjZZ3y-rA0kj5002PgGGRgM1aZRCldIR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#.............NUMPY..............#

#Q.1 Convert a 1D array to a 2D array with 2 rows
array1d=np.array((1,2,3,4,5,6))
print(type(array1d))

array2=array1d.reshape(2,3)
print(array2)

#Q.2 Get the common items between a and b
#Input:
#a = np.array([1,2,3,2,3,4,3,4,5,6])
#b = np.array([7,2,10,2,7,4,9,4,9,8])
#Desired Output:
#array([2, 4])

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

same = np.intersect1d(a, b)
print(same)

#Q.3 Get all items between 5 and 10 from a.
#Input:
#a = np.array([2, 6, 1, 9, 10, 3, 27])
#Desired Output:
#(array([6, 9, 10]),)

a = np.array([2, 6, 1, 9, 10, 3, 27])
result = np.where((a > 5) & (a < 11))
print(a[result])

#Q.4 Limit the number of items printed in python NumPy array a to a maximum of 6
#elements.
#Input:
#array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
#Desired Output:
#array([ 0, 1, 2, ..., 12, 13, 14])

a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
print(f"array([{a[0]}, {a[1]}, {a[2]}, ..., {a[-3]}, {a[-2]}, {a[-1]}])")

#.............PANDAS............#

#1. Compute the minimum, 25th percentile, median, 75th, and maximum of ser.

a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
np.set_printoptions(threshold=6)  # Limit printed elements
print(a)

#2. Creating A Pandas Data Frame and Using Sample Data Sets

a = pd.Series(np.random.randint(1, 100, 20))
print(a.describe())

#3. Using NumPy, create a Pandas Data Frame with five rows and three columns.

df = pd.DataFrame({'ID':[1,2,3], 'NAME':['Ritu','Anjali','Bijal'], 'SURNAME':['Salunke','Pawar','Rathod']})
df

#4. For a Pandas Data Frame created from a NumPy array, what is the default behavior for
#the labels for the columns? For the rows?

data = np.random.randint(10, 100, size=(5, 3))
columns = ['English', 'Hindi', 'Gujarati']
df = pd.DataFrame(data, columns=columns)
print(df)

data = np.array([[10, 20], [30, 40]])
df = pd.DataFrame(data)
print(df)

data = np.array([[10, 20], [30, 40]])
df = pd.DataFrame(data,columns=(['a','b']))
print(df)

#5. take csv file contains at least 10,000 rows and 12 columns which numerical and text values
#according to that continue following steps.

df = pd.read_excel("/content/product_data.xlsx")
df

#6. Write the code to show the number of rows and columns in data frame.

df.shape

#7. How might you show the first few rows of data frame?

df.head()

#8. If you select a single column from the diamonds Data Frame, what will be the type of the return value?

df1 = pd.read_excel("/content/diamonds.xlsx")
df1
a=df1['clarity']
print(type(a))

#9. Create a line plot using the x and y values provided below. Label the y-axis as “Y” and #label the x-axis as “X”.
#x = [3, 4, 5, 6]
#y = [1.5, 2, 2.5, 3]

x = [3, 4, 5, 6]
y = [1.5, 2, 2.5, 3]

plt.plot(x,y,marker='o', color='green')
#plt.title("Cut wise price")
plt.show()

#10. Create an array of numbers between 0 and 6 with increments of 0.3 and name its “x”.
#Then on the same plot, plot x, x², x³, and x⁴. For consistency, use the following style lines
#respectively, “ro”, “bs”, “g”, and “:”. Lastly, make sure that the x-axis covers 0 to 6, while
#the y-axis spans from 0 to 125. Do not worry if you are not familiar with the style lines —
#you will recognize them as soon as you see the plot.

x = np.arange(0,6,0.3)
x2 = x ** 2
x3 = x ** 3
x4 = x ** 4
plt.plot(x, x, 'ro')
plt.plot(x, x2, 'bs')
plt.plot(x, x3, 'g')
plt.plot(x, x4, ':')
plt.xlim(0, 6)
plt.ylim(0, 125)

# 11. Heights and initials of a group of individuals are provided below. Create a bar plot titled “Height Comparison” to compare the heights among this group.
#height = [179, 155, 191, 152, 188, 177]
#names = ['QA', 'WB', 'EC', 'RD', 'TE', 'YF']

height = [179, 155, 191, 152, 188, 177]
names = ['QA', 'WB', 'EC', 'RD', 'TE', 'YF']
plt.bar(height,names)
plt.title("Height Comparison")

#12. Plot a histogram of x, where x consists of 100,000 randomly-selected points with a normal
#distribution (hint: you can use numpy.random.randn() to generate the random points). The
#histogram should have 10 bins. Look at how the histogram changes when we try 20 and 50 bins.

x = np.random.randn(100000)
plt.hist(x, bins=10, color='skyblue', edgecolor='black')
plt.hist(x, bins=20, color='lavender', edgecolor='black')
plt.hist(x, bins=50, color='purple', edgecolor='black')

#13. What are the features of TensorFlow?

Open source
TensorBoard
Debugging
Flexibility
GPU Support
Neural network
Scalability
Community support
Easy experimentation
Scalable
Tensorflow addons
API layer
Compatibility
Distributed computing
Graph
Keras
Layers
Pre-trained models
TensorFlow Lite
Abstraction
Architectural limitation
Easily trainable
Easy model building
Effective

#14. List a few limitations of TensorFlow.

Low-level API:
TensorFlow is often described as a lower-level API, meaning it requires more in-depth knowledge of machine learning concepts like linear algebra and calculus compared to more user-friendly frameworks.

GPU Support:
While TensorFlow excels with NVIDIA GPUs, it currently lacks support for other GPU architectures like those based on OpenCL, limiting its hardware compatibility.

Memory Conflicts:
Importing TensorFlow alongside other frameworks that utilize GPU memory, like Theano, can lead to conflicts and performance issues.

Frequent Updates:
TensorFlow receives regular updates, which can require users to uninstall and reinstall the framework to access the latest features and bug fixes, potentially disrupting workflows.

Complexity:
Some users find the syntax and structure of TensorFlow code to be more complex than other frameworks, especially when compared to the more streamlined approach offered by Keras.

Homonyms:
TensorFlow utilizes homonyms, where the same name is used for different functions with varying implementations, potentially causing confusion and errors.

Windows Support:
While TensorFlow is available for Windows, it may not offer the same breadth of features and capabilities as the Linux version.

Speed:
TensorFlow can be slower compared to other frameworks in certain scenarios, particularly when dealing with specific operations or when not fully optimized.

#15. What do you know about supervised and unsupervised machine learning?

1. Supervised Machine Learning
Definition:
In supervised learning, the model is trained on a labeled dataset — that is, the input data is paired with the correct output.

Goal:
To learn a mapping from inputs to outputs so it can predict outcomes for new, unseen data.

Key Features:
Uses labeled data (input → output).
Involves training and testing phases.
Often used for prediction and classification tasks.

Common Algorithms:
Linear Regression
Logistic Regression
Decision Trees
Support Vector Machines (SVM)
Random Forest
k-Nearest Neighbors (KNN)
Neural Networks (for classification and regression)

Example Use Cases:
Predicting house prices (regression)
Email spam detection (classification)
Diagnosing diseases based on symptoms (classification)






2. Unsupervised Machine Learning
Definition:
In unsupervised learning, the model works with unlabeled data and tries to find hidden patterns or structures in the data.

Goal:
To explore the data and find some structure — like grouping similar data points or reducing dimensions.

Key Features:
Works on unlabeled data (no output given).
Useful for exploratory analysis.
No explicit feedback or correction.
Common Algorithms:
K-Means Clustering
Hierarchical Clustering
DBSCAN
Principal Component Analysis (PCA)
t-SNE (for visualization)

Example Use Cases:
Customer segmentation
Market basket analysis
Anomaly detection
Dimensionality reduction before visualization